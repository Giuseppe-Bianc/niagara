include(CheckCXXCompilerFlag)

macro(
  niagara_enable_hardening
  target
  global
  ubsan_minimal_runtime)

  message(STATUS "Configuring security hardening for target: ${target}")
  message(STATUS "-----------------------------------------")

  if(MSVC)
    set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} /sdl /DYNAMICBASE /guard:cf")
    set(NEW_LINK_OPTIONS "${NEW_LINK_OPTIONS} /NXCOMPAT /CETCOMPAT")
    message(STATUS "  [CXX] /sdl          - Security Development Lifecycle checks")
    message(STATUS "  [CXX] /DYNAMICBASE  - Enable ASLR (Address Space Layout Randomization)")
    message(STATUS "  [CXX] /guard:cf     - Control Flow Guard for indirect call protection")
    message(STATUS "  [LNK] /NXCOMPAT     - Data Execution Prevention (DEP) compatibility")
    message(STATUS "  [LNK] /CETCOMPAT    - Intel Control-flow Enforcement Technology")

  elseif(CMAKE_CXX_COMPILER_ID MATCHES ".*Clang|GNU")
    message(STATUS "GNU/Linux Toolchain Hardening Configuration:")
    set(NEW_CXX_DEFINITIONS "${NEW_CXX_DEFINITIONS} -D_GLIBCXX_ASSERTIONS")
    message(STATUS "  [DEF] -D_GLIBCXX_ASSERTIONS - Standard library safety:")
    message(STATUS "           * Bounds checking for vector/string/array operator[]")
    message(STATUS "           * Iterator validation in debug mode")

    set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3")
    message(STATUS "  [CXX] -D_FORTIFY_SOURCE=3 - Memory safety protection (requires glibc 2.33+):")
    message(STATUS "           * Buffer overflow prevention for common functions")
    message(STATUS "           * Format string vulnerability detection")

    #    check_cxx_compiler_flag(-fpie PIE)
    #if(PIE)
    #  set(NEW_COMPILE_OPTIONS ${NEW_COMPILE_OPTIONS} -fpie)
    #  set(NEW_LINK_OPTIONS ${NEW_LINK_OPTIONS} -pie)
    #
    #  message(STATUS "*** g++/clang PIE mode enabled")
    #else()
    #  message(STATUS "*** g++/clang PIE mode NOT enabled (not supported)")
    #endif()

    check_cxx_compiler_flag(-fstack-protector-strong STACK_PROTECTOR)
    if(STACK_PROTECTOR)
      set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -fstack-protector-strong")
      message(STATUS "  [CXX] -fstack-protector-strong - Stack smashing protection:")
      message(STATUS "           * Protects functions with vulnerable stack allocations")
      message(STATUS "           * Balance between security and performance (~2-5% overhead)")
    else()
      message(STATUS "Stack protector not available (not supported)")
    endif()

    check_cxx_compiler_flag(-fcf-protection CF_PROTECTION)
    if(CF_PROTECTION)
      set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -fcf-protection")
      message(STATUS "  [CXX] -fcf-protection - Control Flow Integrity:")
      message(STATUS "           * Mitigates ROP/JOP attacks via Intel CET")
      message(STATUS "           * Requires CPU with Shadow Stack support")
    else()
      message(STATUS "CFI not available (not supported)")
    endif()

    check_cxx_compiler_flag(-fstack-clash-protection CLASH_PROTECTION)
    if(CLASH_PROTECTION)
      if(LINUX OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -fstack-clash-protection")
        message(STATUS "  [CXX] -fstack-clash-protection - Stack overflow prevention:")
        message(STATUS "           * Guards against jump-over-guard-page attacks")
        message(STATUS "           * Requires Linux kernel 4.14+")
      else()
        message(STATUS "Stack clash protection requires Linux/GNU toolchain")
      endif()
    else()
      message(STATUS "Stack clash protection unavailable (not supported)")
    endif()
  endif()

  # Undefined behavior sanitizer configuration
  if(ubsan_minimal_runtime)
    message(STATUS "Undefined Behavior Sanitizer Configuration:")
    check_cxx_compiler_flag("-fsanitize=undefined -fno-sanitize-recover=undefined -fsanitize-minimal-runtime" MINIMAL_RUNTIME)
    if(MINIMAL_RUNTIME)
      set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -fsanitize=undefined -fsanitize-minimal-runtime")
      set(NEW_LINK_OPTIONS "${NEW_LINK_OPTIONS} -fsanitize=undefined -fsanitize-minimal-runtime")

      if(NOT global)
        set(NEW_COMPILE_OPTIONS "${NEW_COMPILE_OPTIONS} -fno-sanitize-recover=undefined")
        set(NEW_LINK_OPTIONS "${NEW_LINK_OPTIONS} -fno-sanitize-recover=undefined")
        message(STATUS "  [CXX] -fno-sanitize-recover=undefined - Fatal UB detection:")
        message(STATUS "           * Immediate termination on critical errors")
      else()
        message(STATUS " Using recoverable UB checks for global compatibility")
      endif()

      message(STATUS "  [CXX] -fsanitize-minimal-runtime - Production-safe sanitizer:")
      message(STATUS "           * ~50% less overhead than full sanitizer")
      message(STATUS "           * Requires clang 7+/gcc 10+")
    else()
      message(STATUS " UBSan minimal runtime unavailable - needs modern toolchain")
    endif()
  endif()

  # Apply hardening configuration
  message(STATUS "Final Hardening Flags:")
  message(STATUS "  Compiler Options: ${NEW_COMPILE_OPTIONS}")
  message(STATUS "  Linker Options:   ${NEW_LINK_OPTIONS}")
  message(STATUS "  Definitions:      ${NEW_CXX_DEFINITIONS}")

  if(${global})
    message(STATUS "Applying hardening GLOBALLY to all targets (caution!)")
    message(STATUS "  Note: May affect dependency compatibility")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEW_COMPILE_OPTIONS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${NEW_LINK_OPTIONS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEW_CXX_DEFINITIONS}")
  else()
    message(STATUS "Applying hardening to TARGET: ${target}")
    target_compile_options(${target} INTERFACE ${NEW_COMPILE_OPTIONS})
    target_link_options(${target} INTERFACE ${NEW_LINK_OPTIONS})
    target_compile_definitions(${target} INTERFACE ${NEW_CXX_DEFINITIONS})
  endif()
  message(STATUS "Hardening configuration complete")
  message(STATUS "-----------------------------------------")
endmacro()
